{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/ProfileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","features/profile/ProfileHeader.tsx","app/common/photoUpload/photoWidgetDropzone.tsx","app/common/photoUpload/photoWidgetCropper.tsx","app/common/photoUpload/photouploadwidget.tsx","features/profile/ProfilePhotos.tsx","features/profile/ProfileCard.tsx","features/profile/ProfileFollowings.tsx","features/profile/ProfileActivities.tsx","features/profile/ProfileContent.tsx","features/profile/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","removeItem","history","push","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attend","unattend","current","login","user","register","username","uploadPhoto","photo","setMainPhoto","deletePhoto","follow","unfollow","listFollowings","predicate","listActivities","setActivityProps","date","Date","isGoing","attendees","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","action","set","computed","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","catch","on","comment","runInAction","comments","stop","activityId","invoke","loadingInitial","agent","axiosParams","ActivitiesEnvelope","userStore","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","profile","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","styles","borderColor","borderWidth","ActivityListItemAttendees","List","horizontal","map","Popup","trigger","size","circular","bordered","ActivityListItem","host","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","setPredicate","vertical","width","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Loader","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","length","flat","err","i","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","RegisterForm","HomePage","isLoggedIn","openModal","className","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","e","DateInput","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","setActivity","setLoading","finally","initialValues","dateAndTime","timeString","getHours","getMinutes","year","getFullYear","month","getMonth","day","getDate","dateString","combineDateAndTime","newActivity","uuid","widths","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","isCurrentUser","Statistic","label","followingCount","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","Row","sub","overflow","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","Component","rest","props","withRouter","location","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cb7a5a6.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { IActivity, IActivitiesEnvelope } from '../models/activity';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\nimport { IProfile, IPhoto } from '../models/profile';\r\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use((config) => {\n    const token = window.localStorage.getItem('jwt');    \n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n}, error => {\n    return Promise.reject(error);\n})\n\naxios.interceptors.response.use(undefined, error => {\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!')\n    }\n    const {status, data, config, headers} = error.response;\n    if (status === 401 && headers[\"www-authenticate\"] === 'Bearer error=\"invalid_token\", error_description=\"The token is expired\"') {\n        window.localStorage.removeItem('jwt');\n        history.push('/');\n        toast.info('Your session has expired. Please login again');\n    }\n    if (status === 404) {\n        history.push('/notfound')\n    }\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/notfound')\n    }\n    if (status === 500) {\n        toast.error('Server error - check the terminal for more info!')\n    }\n    throw error.response;\n})\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\n    del: (url: string) => axios.delete(url).then(responseBody),\n    postForm: (url: string, file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios\r\n            .post(url, formData, {\r\n                headers: { 'Content-type': 'multipart/form-data' }\r\n            })\r\n            .then(responseBody)\n    }\n};\n\nconst Activities = {\n    //list: (limit?: number, page?: number): Promise<IActivitiesEnvelope> =>\n    //    requests.get(`/activities?limit=${limit}&offset=${page ? page * limit! : 0}`),\n    list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\r\n        axios.get('/activities', { params: params }).then(responseBody),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`),\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n    unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n}\n\nconst User = {\n    current: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\n}\n\nconst Profiles = {\n    get: (username: string): Promise<IProfile> =>\n        requests.get(`/profiles/${username}`),\n    uploadPhoto: (photo: Blob): Promise<IPhoto> =>\n        requests.postForm(`/photos`, photo),\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    //updateProfile: (profile: Partial<IProfile>) =>\n    //requests.put(`/profiles`, profile),\n    follow: (username: string) =>\n        requests.post(`/profiles/${username}/follow`, {}),\n    unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get(`/profiles/${username}/activities?predicate=${predicate}`)\n};\n\nexport default {\n    Activities,\n    User,\n    Profiles\n}","import { IActivity, IAttendee } from \"../../models/activity\";\r\nimport { IUser } from \"../../models/user\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const dateString = `${year}-${month}-${day}`;\n\n    return new Date(dateString + ' ' + timeString);\n}\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n    activity.date = new Date(activity.date);\r\n    activity.isGoing = activity.attendees.some(a => a.username === user.username);\r\n    activity.isHost =  activity.attendees.some(\r\n        a => a.username === user.username && a.isHost === 'True'\r\n    );\r\n    return activity;\r\n}\r\n\r\nexport const createAttendee = (user: IUser): IAttendee => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: 'False',\r\n        username: user.username,\r\n        image: user.image!\r\n    }\r\n}\r\n\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\nimport { SyntheticEvent } from 'react';\nimport { IActivity } from '../models/activity';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { RootStore } from './rootStore';\nimport { setActivityProps, createAttendee } from '../common/util/util';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@aspnet/signalr';\r\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(\r\n            () => this.predicate.keys(),       //If there is change in predicate.keys then run the below function\r\n            () => {\r\n                this.page = 0;\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\n    }\n\n    @observable activityRegistry = new Map();\n    @observable activity: IActivity | null = null;\n    @observable loadingInitial = false;\n    @observable submitting = false;\n    @observable target = '';\n    @observable loading = false;\n    @observable.ref hubConnection: HubConnection | null = null;\n    @observable activityCount = 0;\n    @observable page = 0;\n    @observable predicate = new Map();\r\n\r\n    @action setPredicate = (predicate: string, value: string | Date) => {\r\n        this.predicate.clear();\r\n        if (predicate !== 'all') {\r\n            this.predicate.set(predicate, value);\r\n        }\r\n    }\n    @computed get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('limit', String(LIMIT));\r\n        params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, value.toISOString())\r\n            } else {\r\n                params.append(key, value)\r\n            }\r\n        })\r\n        return params;\r\n    }\n\n    @computed get totalPages() {\r\n        return Math.ceil(this.activityCount / LIMIT);\r\n    }\n\n    @action setPage = (page: number) => {\r\n        this.page = page;\r\n    }\n\n    @action createHubConnection = () => {\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n                accessTokenFactory: () => this.rootStore.commonStore.token!\r\n            })\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n        this.hubConnection\r\n            .start()\r\n            .then(() => console.log(this.hubConnection!.state))\r\n            .catch(error => console.log(\"Error Establishing Connection: \", error))\r\n\r\n        this.hubConnection.on('ReceiveComment', comment => {\r\n                runInAction(() => {\r\n                    this.activity!.comments.push(comment);\r\n                })\r\n            })\r\n    }\n\n    @action stopHubConnection = () => {\n        this.hubConnection!.stop();\r\n    }\n\n    @action addComment = async (values: any) => {\r\n        values.activityId = this.activity!.id;\r\n        try {\r\n            await this.hubConnection!.invoke('SendComment', values)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    } \n\n    @computed get activitiesByDate() {\n        return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()))\n    }\n\n    groupActivitiesByDate(activities: IActivity[]) {\n        const sortedActivities = activities.sort(\n            (a, b) => a.date.getTime() - b.date.getTime()\n        )\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\n            const date = activity.date.toISOString().split('T')[0];\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n            return activities;\n        }, {} as { [key: string]: IActivity[] }));\n    }\n\n    @action loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            //const ActivitiesEnvelope = await agent.Activities.list(LIMIT, this.page);\n            const ActivitiesEnvelope = await agent.Activities.list(this.axiosParams);\n            const { activities, activityCount } = ActivitiesEnvelope;\n            runInAction('loading activities', () => {\n                activities.forEach(activity => {\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activityRegistry.set(activity.id, activity);\n                });\n                this.activityCount = activityCount;\n                this.loadingInitial = false;\n            })\n        } catch (error) {\n            runInAction('load activities error', () => {\n                this.loadingInitial = false;\n            })\n        }\n    };\n\n    @action loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.activity = activity;\n            return toJS(activity);\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                runInAction('getting activity', () => {\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activity = activity;\n                    this.activityRegistry.set(activity.id, activity);\n                    this.loadingInitial = false;\n                })\n                return activity;\n            } catch (error) {\n                runInAction('get activity error', () => {\n                    this.loadingInitial = false;\n                })\n                console.log(error);\n            }\n        }\n    }\n\n    @action clearActivity = () => {\n        this.activity = null;\n    }\n\n    getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    @action createActivity = async (activity: IActivity) => {\n        this.submitting = true;\n\n        try {\n            await agent.Activities.create(activity);\n            const attendee = createAttendee(this.rootStore.userStore.user!);\r\n            attendee.isHost = 'True';\r\n            let attendees = [];\r\n            attendees.push(attendee);\r\n            activity.attendees = attendees;\n            activity.comments = [];\n            activity.isHost = true;\n            runInAction('create activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.submitting = false;\n            })\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('create activity error', () => {\n                this.submitting = false;\n            })\n            toast.error('Problem submitting data');\n            console.log(error.response);\n        }\n    };\n\n    @action editActivity = async (activity: IActivity) => {\n        this.submitting = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction('editing activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.activity = activity;\n                this.submitting = false;\n            })\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('edit activity error', () => {\n                this.submitting = false;\n            })\n            toast.error('Problem submitting data');\n            console.log(error);\n        }\n    };\n\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\n        this.submitting = true;\n        this.target = event.currentTarget.name;\n        try {\n            await agent.Activities.delete(id);\n            runInAction('deleting activity', () => {\n                this.activityRegistry.delete(id);\n                this.submitting = false;\n                this.target = '';\n            })\n        } catch (error) {\n            runInAction('delete activity error', () => {\n                this.submitting = false;\n                this.target = '';\n            })\n            console.log(error);\n        }\n    }\n\n    @action attendActivity = async () => {\r\n        const attendee = createAttendee(this.rootStore.userStore.user!);\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees.push(attendee);\r\n                    this.activity.isGoing = true;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            toast.error('Problem signing up to activity');\r\n        }\r\n    };\r\n\r\n    @action cancelAttendance = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.unattend(this.activity!.id);\r\n            runInAction(() => {\r\n                if (this.activity) {\r\n                    this.activity.attendees = this.activity.attendees.filter(\r\n                        a => a.username !== this.rootStore.userStore.user!.username\r\n                    );\r\n                    this.activity.isGoing = false;\r\n                    this.activityRegistry.set(this.activity.id, this.activity);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n            toast.error('Problem cancelling attendance');\r\n        }\r\n    };\n}\n","import { observable, computed, action, runInAction } from 'mobx';\nimport { IUser, IUserFormValues } from '../models/user';\nimport agent from '../api/agent';\nimport { RootStore } from './rootStore';\nimport { history } from '../..';\n\nexport default class UserStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable user: IUser | null = null;\n\n  @computed get isLoggedIn() {\n    return !!this.user;\n  }\n\n  @action login = async (values: IUserFormValues) => {\n    try {\n      const user = await agent.User.login(values);\n      runInAction(() => {\n        this.user = user;\n      });\n      this.rootStore.commonStore.setToken(user.token);\n      this.rootStore.modalStore.closeModal();\n      history.push('/activities');\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  @action register = async (values: IUserFormValues) => {\n    try {\n      const user = await agent.User.register(values);\n      this.rootStore.commonStore.setToken(user.token);\n      this.rootStore.modalStore.closeModal();\n      history.push('/activities')\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @action getUser = async () => {\n    try {\n      const user = await agent.User.current();\n      runInAction(() => {\n        this.user = user;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  @action logout = () => {\n    this.rootStore.commonStore.setToken(null);\n    this.user = null;\n    history.push('/');\n  };\n}\n","import {RootStore} from './rootStore';\nimport { observable, action, reaction } from 'mobx';\n\nexport default class CommonStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    @observable token: string | null = window.localStorage.getItem('jwt');\n    @observable appLoaded = false;\n\n    @action setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    @action setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { RootStore } from \"./rootStore\";\nimport { observable, action } from \"mobx\";\n\nexport default class ModalStore {\n    rootStore: RootStore;\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable.shallow modal = {\n        open: false,\n        body: null\n    }\n    \n    @action openModal = (content: any) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    @action closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { RootStore } from './rootStore';\r\nimport { observable, action, runInAction, computed, reaction } from 'mobx';\r\nimport { IProfile, IPhoto, IUserActivity } from '../models/profile';\r\nimport agent from '../api/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class ProfileStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n        () => this.activeTab,\r\n        activeTab => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                this.loadFollowings(predicate)\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        }\r\n    )\r\n  }\r\n\r\n  @observable profile: IProfile | null = null;\r\n  @observable loadingProfile = true;\r\n  @observable uploadingPhoto = false;\r\n  @observable loading = false;\r\n  @observable followings: IProfile[] = [];\r\n  @observable activeTab: number = 0;\r\n  @observable userActivities: IUserActivity[] = [];\r\n  @observable loadingActivities = false;\r\n\r\n    @computed get isCurrentUser() {\r\n        if (this.rootStore.userStore.user && this.profile) {\r\n            return this.rootStore.userStore.user.username === this.profile.username;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n  @action loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true;\r\n    try {\r\n      const activities = await agent.Profiles.listActivities(username, predicate!);\r\n      runInAction(() => {\r\n        this.userActivities = activities;\r\n        this.loadingActivities = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading activities')\r\n      runInAction(() => {\r\n        this.loadingActivities = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  @action setActiveTab = (activeIndex: number) => {\r\n      this.activeTab = activeIndex;\r\n  } \r\n\r\n  @action loadProfile = async (username: string) => {\r\n    this.loadingProfile = true;\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n        this.loadingProfile = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingProfile = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action uploadPhoto = async (file: Blob) => {\r\n    this.uploadingPhoto = true;\r\n    try {\r\n      const photo = await agent.Profiles.uploadPhoto(file);\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos.push(photo);\r\n          if (photo.isMain && this.rootStore.userStore.user) {\r\n            this.rootStore.userStore.user.image = photo.url;\r\n            this.profile.image = photo.url;\r\n          }\r\n        }\r\n        this.uploadingPhoto = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error('Problem uploading photo');\r\n      runInAction(() => {\r\n        this.uploadingPhoto = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action setMainPhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      runInAction(() => {\r\n        this.rootStore.userStore.user!.image = photo.url;\r\n        this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n        this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n        this.profile!.image = photo.url;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem setting photo as main');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action deletePhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      runInAction(() => {\r\n        this.profile!.photos = this.profile!.photos.filter(\r\n          a => a.id !== photo.id\r\n        );\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem deleting the photo');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  //@action updateProfile = async (profile: Partial<IProfile>) => {\r\n  //  try {\r\n  //    await agent.Profiles.updateProfile(profile);\r\n  //    runInAction(() => {\r\n  //      if (\r\n  //        profile.displayName !== this.rootStore.userStore.user!.displayName\r\n  //      ) {\r\n  //        this.rootStore.userStore.user!.displayName = profile.displayName!;\r\n  //      }\r\n  //      this.profile = { ...this.profile!, ...profile };\r\n  //    });\r\n  //  } catch (error) {\r\n  //    toast.error('Problem updating profile');\r\n  //  }\r\n  //};\r\n\r\n  @action follow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.follow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = true;\r\n        this.profile!.followersCount++;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem following user');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action unfollow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.unfollow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = false;\r\n        this.profile!.followersCount--;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem unfollowing user');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadFollowings = async (predicate: string) => {\r\n    this.loading = true;\r\n    try {\r\n      const profiles = await agent.Profiles.listFollowings(\r\n        this.profile!.username,\r\n        predicate\r\n      );\r\n      runInAction(() => {\r\n          this.followings = profiles;\r\n          this.loading = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading followings');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n}","import ActivityStore from './activityStore';\nimport UserStore from './userStore';\nimport { createContext } from 'react';\nimport { configure } from 'mobx';\nimport CommonStore from './commonStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './ProfileStore';\r\n\nconfigure({enforceActions: 'always'});\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n\n    constructor() {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext } from 'react';\nimport { Menu, Container, Button, Dropdown, Image } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { NavLink, Link } from 'react-router-dom';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user, logout } = rootStore.userStore;\n  return (\n    <Menu fixed='top' inverted>\n      <Container>\n        <Menu.Item header as={NavLink} exact to='/'>\n          <img src='/assets/logo.png' alt='logo' style={{ marginRight: 10 }} />\n          Reactivities\n        </Menu.Item>\n        <Menu.Item name='Activities' as={NavLink} to='/activities' />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            to='/createActivity'\n            positive\n            content='Create Activity'\n          />\n        </Menu.Item>\n        {user && (\n          <Menu.Item position='right'>\n            <Image avatar spaced='right' src={user.image || '/assets/user.png'} />\n            <Dropdown pointing='top left' text={user.displayName}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  as={Link}\n                  to={`/profile/${user.username}`}\n                  text='My profile'\n                  icon='user'\n                />\n                <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu.Item>\n        )}\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","import React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { IAttendee } from '../../../app/models/activity';\r\n\r\ninterface IProps {\r\n    attendees: IAttendee[];\r\n}\r\n\r\nconst styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 2\r\n}\r\n\r\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <List.Item key={attendee.username}>\r\n                    <Popup\r\n                        header={attendee.displayName}\r\n                        trigger={\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        }\r\n                    />\r\n                </List.Item>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default ActivityListItemAttendees;","import React from 'react';\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IActivity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\r\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n    const host = activity.attendees.find(a => a.isHost === 'True')\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={host?.image || '/assets/user.png'} style={{ marginBottom: 13 }} />\n                        <Item.Content>\n                            <Item.Header as='Link' to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\n                            <Item.Description>\r\n                                Hosted by\r\n                                <Link to={`/profile/${host?.username}`}> {host?.displayName}</Link>\r\n                            </Item.Description>\n                            {activity.isHost &&\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='orange'\n                                        content='You are hosting this activity.' />\n\n                                </Item.Description>}\n                            {activity.isGoing && !activity.isHost &&\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='green'\n                                        content='You are going to this activity.' />\n                                </Item.Description>}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <Icon name='clock' /> {format(activity.date, 'h:mm a')}\n                <Icon name='marker' /> {activity.venue}, {activity.city}\n            </Segment>\n            <Segment secondary> <ActivityListItemAttendees attendees={activity.attendees} /> </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    floated='right'\n                    content='View'\n                    color='blue'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default ActivityListItem;\n","import React, { useContext, Fragment } from 'react';\nimport { Item, Label } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst ActivityList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { activitiesByDate } = rootStore.activityStore;\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Label size='large' color='blue'>\n            {group}\n          </Label>\n          <Item.Group divided>\n            {activities.map(activity => (\n              <ActivityListItem key={activity.id} activity={activity} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityFilters = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { predicate, setPredicate } = rootStore.activityStore;\r\n    return (\r\n        <Fragment>\r\n            <Menu vertical size={'large'} style={{ width: '100%', marginTop: 22 }}>\r\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\r\n                <Menu.Item\r\n                    active={predicate.size === 0}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                    color={'blue'}\r\n                    name={'all'}\r\n                    content={'All Activities'}\r\n                />\r\n                <Menu.Item\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                    color={'blue'}\r\n                    name={'username'}\r\n                    content={\"I'm Going\"}\r\n                />\r\n                <Menu.Item\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    color={'blue'}\r\n                    name={'host'}\r\n                    content={\"I'm hosting\"}\r\n                />\r\n            </Menu>\r\n            <Header\r\n                icon={'calendar'}\r\n                attached\r\n                color={'teal'}\r\n                content={'Select Date'}\r\n            />\r\n            <Calendar\r\n                onChange={date => setPredicate('startDate', date!)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityFilters);","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst ActivityListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='blue' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { observer } from 'mobx-react-lite';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport InfiniteScroll from 'react-infinite-scroller'\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\nconst ActivityDashboard: React.FC = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {\n        loadActivities,\n        loadingInitial,\n        setPage,\n        page,\n        totalPages\n    } = rootStore.activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    const handleGetNext = () => {\n        setLoadingNext(true);\n        setPage(page + 1);\n        loadActivities().then(() => setLoadingNext(false));\n    };\n\n    useEffect(() => {\n        loadActivities();\n    }, [loadActivities]);\n\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                {loadingInitial && page === 0 ? (\r\n                    <ActivityListItemPlaceholder />\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && page + 1 < totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\n               \n            </Grid.Column>\n            <Grid.Column width={6}>\n                <h2>Activity filters</h2>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDashboard);\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport { AxiosResponse } from 'axios';\nimport { Message } from 'semantic-ui-react';\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n        <Message.List>\n          {Object.values(error.data.errors).flat().map((err, i) => (\n            <Message.Item key={i}>{err}</Message.Item>\n          ))}\n        </Message.List>\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Form, Button, Header } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { IUserFormValues } from '../../app/models/user';\nimport { FORM_ERROR } from 'final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n  email: isRequired('Email'),\n  password: isRequired('Password')\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login } = rootStore.userStore;\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        login(values).catch(error => ({\n          [FORM_ERROR]: error\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit\n      }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Header\n            as='h2'\n            content='Login to Reactivities'\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='email' component={TextInput} placeholder='Email' />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder='Password'\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n              text='Invalid email or password'\n            />\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content='Login'\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default LoginForm;\n","import React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Form, Button, Header } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { IUserFormValues } from '../../app/models/user';\nimport { FORM_ERROR } from 'final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n  username: isRequired('Username'),\n  displayName: isRequired('DisplayName'),\n  email: isRequired('Email'),\n  password: isRequired('Password')\n});\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        register(values).catch(error => ({\n          [FORM_ERROR]: error\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit\n      }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Header\n            as='h2'\n            content='Sign up to Reactivities'\n            color='teal'\n            textAlign='center'\n          />\n          <Field name='username' component={TextInput} placeholder='Username' />\n          <Field\n            name='displayName'\n            component={TextInput}\n            placeholder='Display Name'\n          />\n          <Field name='email' component={TextInput} placeholder='Email' />\n          <Field\n            name='password'\n            component={TextInput}\n            placeholder='Password'\n            type='password'\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n            />\n          )}\n          <Button\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color='teal'\n            content='Register'\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import React, { useContext, Fragment } from 'react';\nimport { Container, Segment, Header, Button, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport LoginForm from '../user/LoginForm';\nimport RegisterForm from '../user/RegisterForm';\n\nconst HomePage = () => {\n    const token = localStorage.getItem('jwt');\n  const rootStore = useContext(RootStoreContext);\n  const { user, isLoggedIn } = rootStore.userStore;\n  const {openModal} = rootStore.modalStore;\n  return (\n    <Segment inverted textAlign='center' vertical className='masthead'>\n      <Container text>\n        <Header as='h1' inverted>\n          <Image\n            size='massive'\n            src='/assets/logo.png'\n            alt='logo'\n            style={{ marginBottom: 12 }}\n          />\n          Reactivities\n        </Header>\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header as='h2' inverted content={`Welcome back ${user.displayName}`} />\n            <Button as={Link} to='/activities' size='huge' inverted>\n              Go to activities!\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n          <Header as='h2' inverted content={`Welcome to Reactivitities`} />\n          <Button onClick={() => openModal(<LoginForm />)} size='huge' inverted>\n            Login\n          </Button>\n          <Button onClick={() => openModal(<RegisterForm />)} size='huge' inverted>\n            Register\n          </Button>\n        </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","export interface IActivitiesEnvelope {\n    activities: IActivity[];\n    activityCount: number;\n}\n\nexport interface IActivity {\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    date: Date;\n    city: string;\n    venue: string;\n    isGoing: boolean;\n    isHost: boolean;\n    attendees: IAttendee[];\n    comments: IComment[];\n}\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n    time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date?: Date = undefined;\n    time?: Date = undefined;\n    city: string = '';\n    venue: string = '';\n\n    constructor(init?: IActivityFormValues) {\n        if (init && init.date) {\n            init.time = init.date;\n        }  \n        Object.assign(this, init);\n    }\n}\n\nexport interface IAttendee {\n    username: string;\n    displayName: string;\n    image: string;\n    isHost: string;\n    following?: boolean;\n}\n\nexport interface IComment {\n    id: string;\n    createdAt: Date;\n    body: string;\n    username: string;\n    displayName: string;\n    image: string;\n}","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport { DateTimePicker } from 'react-widgets';\n\ninterface IProps\n    extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps { }\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    date = false,\n    time = false,\n    placeholder,\n    meta: { touched, error },\n    ...rest\n}) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n            <DateTimePicker\n                placeholder={placeholder}\n                value={input.value || null}\n                onChange={input.onChange}\n                onBlur={input.onBlur}\n                onKeyDown={(e) => e.preventDefault()}\n                date={date}\n                time={time}\n            />\n            {touched && error && (\n                <Label basic color='red'>\n                    {error}\n                </Label>\n            )}\n        </Form.Field>\n    );\n}\n\nexport default DateInput;","export const category = [\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\n  { key: 'culture', text: 'Culture', value: 'culture' },\n  { key: 'film', text: 'Film', value: 'film' },\n  { key: 'food', text: 'Food', value: 'food' },\n  { key: 'music', text: 'Music', value: 'music' },\n  { key: 'travel', text: 'Travel', value: 'travel' }\n];","import React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport {\n  combineValidators,\n  isRequired,\n  composeValidators,\n  hasLengthGreaterThan\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters'\n    })\n  )(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time')\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then(activity => {\n          setActivity(new ActivityFormValues(activity));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='Title'\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  placeholder='Description'\n                  rows={3}\n                  value={activity.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  component={SelectInput}\n                  options={category}\n                  name='category'\n                  placeholder='Category'\n                  value={activity.category}\n                />\n                <Form.Group widths='equal'>\n                  <Field\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    placeholder='Date'\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder='Time'\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                <Field\n                  component={TextInput}\n                  name='city'\n                  placeholder='City'\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name='venue'\n                  placeholder='Venue'\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='Submit'\n                />\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='Cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, { useContext } from 'react';\nimport { Segment, Item, Header, Button, Image } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({ activity }) => {\n    const rootStore = useContext(RootStoreContext);\n    const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n    const host = activity.attendees.find(a => a.isHost === 'True');               //My code\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                <Image\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                    fluid\n                    style={activityImageStyle}\n                />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\n                                <p>\n                                    Hosted by{' '}\r\n                                    <Link to={`/profile/${host?.username}`}>\r\n                                        <strong>{host?.displayName}</strong>\n                                    </Link>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <Button\n                        as={Link}\n                        to={`/manage/${activity.id}`}\n                        color='orange'\n                        floated='right'>\n                        Manage Event\n                    </Button>\r\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\n                ) :\n                        <Button loading={loading} color='teal' onClick={attendActivity}>Join Activity</Button>\n                }\n\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\n\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date, 'eeee do MMMM')} at {format(activity.date!, 'h:mm a')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Link } from 'react-router-dom';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ActivityDetailedChat = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        createHubConnection,\r\n        stopHubConnection,\r\n        addComment,\r\n        activity\r\n    } = rootStore.activityStore;\r\n\r\n    useEffect(() => {\r\n        createHubConnection();\r\n        return () => {\r\n            stopHubConnection();\r\n        }\r\n    }, [createHubConnection, stopHubConnection])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Comment.Group>\r\n                    {activity && activity.comments && activity.comments.map((comment) => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    {/* <div>{formatDistance(comment.createdAt, new Date())}</div> */}\r\n                                    <div>{comment.createdAt}</div>\r\n \r\n \r\n                                </Comment.Metadata>\r\n                                <Comment.Text>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    <FinalForm\r\n                        onSubmit={addComment}\r\n                        render={({ handleSubmit, submitting, form }) => (\r\n                            <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                                <Field\r\n                                    name='body'\r\n                                    component={TextAreaInput}\r\n                                    rows={2}\r\n                                    placeholder='Add your comment'\r\n                                />\r\n                                <Button\r\n                                    loading={submitting}\r\n                                    content='Add Reply'\r\n                                    labelPosition='left'\r\n                                    icon='edit'\r\n                                    primary\r\n                                />\r\n                            </Form>\r\n                        )}\r\n                    />\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);","import React, { Fragment } from 'react';\nimport { Segment, List, Item, Label, Image } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IAttendee } from '../../../app/models/activity';\r\nimport { observer } from 'mobx-react-lite';\r\n\ninterface IProps {\n    attendees: IAttendee[]\r\n}\n\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\n      </Segment>\n            <Segment attached>\n                <List relaxed divided>\n\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.isHost === 'True' && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>\r\n                                        {attendee.displayName}\r\n                                    </Link>\r\n                                </Item.Header>\r\n                                 {attendee.following &&\r\n                                      <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\n\n                </List>\n            </Segment>\n        </Fragment >\n    );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import React, { useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\n\n  useEffect(() => {\n    loadActivity(match.params.id);\n  }, [loadActivity, match.params.id, history]);\n\n  if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\n\n  if (!activity) return <h2>Activity not found</h2>;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailedHeader activity={activity} />\n        <ActivityDetailedInfo activity={activity} />\n        <ActivityDetailedChat />\n      </Grid.Column>\n          <Grid.Column width={6}>\n              <ActivityDetailedSidebar attendees={activity.attendees} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import React, { useContext } from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../stores/rootStore';\nimport { observer } from 'mobx-react-lite';\n\nconst ModalContainer = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size='mini'>\n      <Modal.Content>{body}</Modal.Content>\n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);\n","import React from 'react';\r\nimport { Segment, Item, Header, Button, Grid, Statistic, Divider, Reveal } from 'semantic-ui-react';\r\nimport { IProfile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    profile: IProfile;\r\n    isCurrentUser: boolean;\r\n    loading: boolean;\r\n    follow: (username: string) => void;\r\n    unfollow: (username: string) => void;\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({\r\n    profile,\r\n    isCurrentUser,\r\n    loading,\r\n    follow,\r\n    unfollow }) => {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size='small'\r\n                                src={profile.image || '/assets/user.png'}\r\n                        />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'>{profile.displayName}</Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    {!isCurrentUser && (\r\n                        <Reveal animated='move'>\r\n                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                <Button\r\n                                    fluid\r\n                                    color='teal'\r\n                                    content={profile.following ? 'Following' : 'Not following'}\r\n                                />\r\n                            </Reveal.Content>\r\n                            <Reveal.Content hidden>\r\n                                <Button\r\n                                    loading={loading}\r\n                                    fluid\r\n                                    basic\r\n                                    color={profile.following ? 'red' : 'green'}\r\n                                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                                    onClick={\r\n                                        profile.following\r\n                                            ? () => unfollow(profile.username)\r\n                                            : () => follow(profile.username)\r\n                                    }\r\n                                />\r\n                            </Reveal.Content>\r\n                        </Reveal>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n\r\n\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n  border: 'dashed 3px',\r\n  borderColor: '#eee',\r\n  borderRadius: '5px',\r\n  paddingTop: '30px',\r\n  textAlign: 'center' as 'center',\r\n  height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n  borderColor: 'green'\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(\r\n      acceptedFiles.map((file: object) =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })\r\n      )\r\n    );\r\n  }, [setFiles]);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      style={\r\n        isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n      }\r\n    >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;","import React, { useRef } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n    setImage: (file: Blob) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n    const cropper = useRef<Cropper>(null);\r\n\r\n    const cropImage = () => {\r\n        if (\r\n            cropper.current &&\r\n            typeof cropper.current.getCroppedCanvas() === 'undefined'\r\n        ) {\r\n            return;\r\n        }\r\n        cropper &&\r\n            cropper.current &&\r\n            cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n                setImage(blob);\r\n            }, 'image/jpeg');\r\n    };\r\n\r\n    return (\r\n        <Cropper\r\n            ref={cropper}\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            // Cropper.js options\r\n            aspectRatio={1 / 1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop={cropImage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PhotoWidgetCropper;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Header, Grid, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoWidgetDropzone from './photoWidgetDropzone';\r\nimport PhotoWidgetCropper from './photoWidgetCropper';\r\n\r\ninterface IProps {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\r\n    const [files, setFiles] = useState<any[]>([]);\r\n    const [image, setImage] = useState<Blob | null>(null);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach(file => URL.revokeObjectURL(file.preview));\r\n        };\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid>\r\n                <Grid.Row />\r\n                <Grid.Column width={4}>\r\n                    <Header color='teal' sub content='Step 1 - Add Photo' />\r\n                    <PhotoWidgetDropzone setFiles={setFiles} />\r\n                </Grid.Column>\r\n                <Grid.Column width={1} />\r\n                <Grid.Column width={4}>\r\n                    <Header sub color='teal' content='Step 2 - Resize image' />\r\n                    {files.length > 0 && (\r\n                        <PhotoWidgetCropper\r\n                            setImage={setImage}\r\n                            imagePreview={files[0].preview}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={1} />\r\n                <Grid.Column width={4}>\r\n                    <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                    {files.length > 0 &&\r\n                        <Fragment>\r\n                        <div\r\n                            className='img-preview'\r\n                            style={{ minHeight: '200px', overflow: 'hidden' }}\r\n                        />\r\n                        <Button.Group widths={2}>\r\n                            <Button\r\n                                positive\r\n                                icon='check'\r\n                                loading={loading}\r\n                                onClick={() => uploadPhoto(image!)}\r\n                            />\r\n                            <Button\r\n                                icon='close'\r\n                                disabled={loading}\r\n                                onClick={() => setFiles([])}\r\n                            />\r\n                        </Button.Group>\r\n                        </Fragment>\r\n                        }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoUploadWidget from '../../app/common/photoUpload/photouploadwidget';\r\n\r\nconst ProfilePhotos = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        profile,\r\n        isCurrentUser,\r\n        uploadPhoto,\r\n        uploadingPhoto,\r\n        setMainPhoto,\r\n        deletePhoto,\r\n        loading\r\n    } = rootStore.profileStore;\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState<string | undefined>(undefined);\r\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\r\n        undefined\r\n    );\r\n\r\n    const handleUploadImage = (photo: Blob) => {\r\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n\r\n\r\n                \r\n\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                   \r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handleUploadImage}\r\n                            loading={uploadingPhoto}\r\n                        />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile &&\r\n                                    profile.photos.map(photo => (\r\n                                        <Card key={photo.id}>\r\n                                            <Image src={photo.url} />\r\n                                            {isCurrentUser && (\r\n                                                <Button.Group fluid widths={2}>\r\n                                                    \r\n\r\n                                                     <Button\r\n                                                        onClick={e => {\r\n                                                            setMainPhoto(photo);\r\n                                                            setTarget(e.currentTarget.name);\r\n                                                        }}\r\n                                                        name={photo.id}\r\n                                                        disabled={photo.isMain}\r\n                                                        loading={loading && target === photo.id}\r\n                                                        basic\r\n                                                        positive\r\n                                                        content='Main'\r\n                                                    />\r\n                                                    <Button\r\n                                                        name={photo.id}\r\n                                                        disabled={photo.isMain}\r\n                                                        onClick={(e) => {\r\n                                                            deletePhoto(photo);\r\n                                                            setDeleteTarget(e.currentTarget.name)\r\n                                                        }}\r\n                                                        loading={loading && deleteTarget === photo.id}\r\n                                                        basic\r\n                                                        negative\r\n                                                        icon='trash'\r\n                                                    /> \r\n                                                </Button.Group>\r\n                                            )}\r\n                                        </Card>\r\n                                    ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column> \r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePhotos);","import React from 'react';\r\nimport { Card, Image, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IProfile } from '../../app/models/profile';\r\n\r\ninterface IProps {\r\n    profile: IProfile\r\n}\r\n\r\nconst ProfileCard: React.FC<IProps> = ({ profile }) => {\r\n    return (\r\n        <Card as={Link} to={`/profile/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <div>\r\n                    <Icon name='user' />\r\n                    {profile.followersCount} Followers\r\n        </div>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ProfileCard;","import React, { useContext } from 'react';\r\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowings = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        profile,\r\n        followings,\r\n        activeTab,\r\n        loading\r\n    } = rootStore.profileStore;\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loading}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={\r\n                                activeTab === 3\r\n                                ? `People following ${profile!.displayName}`\r\n                                : `People ${profile!.displayName} is following`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={5}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ProfileFollowings;","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IUserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = rootStore.profileStore!;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (\r\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n        data: TabProps\r\n    ) => {\r\n        let predicate;\r\n        switch (data.activeIndex) {\r\n            case 1:\r\n                predicate = 'past';\r\n                break;\r\n            case 2:\r\n                predicate = 'hosting';\r\n                break;\r\n            default:\r\n                predicate = 'future';\r\n                break;\r\n        }\r\n        loadUserActivities(profile!.username, predicate);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: IUserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default observer(ProfileEvents);","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfileActivities from './ProfileActivities';\r\n\r\nconst panes = [\r\n    { menuItem: 'About', render: () => <Tab.Pane>About</Tab.Pane> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos /> },\r\n    { menuItem: 'Activities', render: () => <ProfileActivities /> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n    { menuItem: 'Followerings', render: () => <ProfileFollowings /> }\r\n]\r\n\r\ninterface IProps {\r\n    setActiveTab: (activeIndex: any) => void\r\n}\r\n\r\nconst ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => setActiveTab(data.activeIndex)} \r\n            //activeIndex={1}\r\n        />\r\n    )\r\n};\r\n\r\nexport default ProfileContent;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface RouteParams {\r\n    username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> { }\r\n\r\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        loadingProfile,\r\n        profile,\r\n        loadProfile,\r\n        follow,\r\n        unfollow,\r\n        isCurrentUser,\r\n        loading,\r\n        setActiveTab\r\n    } = rootStore.profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(match.params.username);\r\n    }, [loadProfile, match]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <ProfileHeader\r\n                    profile={profile!}\r\n                    isCurrentUser={isCurrentUser}\r\n                    loading={loading}\r\n                    follow={follow}\r\n                    unfollow={unfollow}\r\n                />\r\n                <ProfileContent setActiveTab={setActiveTab} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePage);","import React, { useContext } from 'react'\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\nconst PrivateRoute: React.FC<IProps> = ({ component: Component, ...rest }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const { isLoggedIn } = rootStore.userStore;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default observer(PrivateRoute)","import React, { Fragment, useContext, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport {\n    Route,\n    withRouter,\n    RouteComponentProps,\n    Switch\n} from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport { RootStoreContext } from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profile/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\r\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n    const rootStore = useContext(RootStoreContext);\n    const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n    const { getUser } = rootStore.userStore;\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => setAppLoaded())\n        } else {\n            setAppLoaded();\n        }\n    }, [getUser, setAppLoaded, token])\n\n    if (!appLoaded) return <LoadingComponent content='Loading app...' />\n\n    return (\n        <Fragment>\n            <ModalContainer />\n            <ToastContainer position='bottom-right' />\n            <Route exact path='/' component={HomePage} />\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <Fragment>\n                        <NavBar />\n                        <Container style={{ marginTop: '7em' }}>\n                            <Switch>\n                                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                                <PrivateRoute\n                                    key={location.key}\n                                    path={['/createActivity', '/manage/:id']}\n                                    component={ActivityForm}\n                                />\n                                <PrivateRoute path='/profile/:username' component={ProfilePage} />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </Container>\n                    </Fragment>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {useEffect} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [pathname]);\n  \n    return children || null;\n  };\n  \n  export default withRouter(ScrollToTop);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\nimport dateFnsLocalizer from 'react-widgets-date-fns';\r\n\r\ndateFnsLocalizer();\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router history={history}>\r\n            <ScrollToTop>\r\n                <App />\r\n            </ScrollToTop>\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}